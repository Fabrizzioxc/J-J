---
interface Props {
  class?: string;
  style?: string;
}
const { class: className, style } = Astro.props;
---

<div class:list={["scroll-animate", className]} style={style}>
  <slot />
</div>

<script>
  // 1. Envuelve toda la lógica en una función.
  function setupAnimations() {
    const animatedElements = document.querySelectorAll(".scroll-animate");

    if (animatedElements.length === 0) return; // No hacer nada si no hay elementos

    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add("is-visible");
          observer.unobserve(entry.target);
        }
      });
    }, {
      threshold: 0.1,
    });

    animatedElements.forEach(el => {
      observer.observe(el);
    });
  }

  // 2. Escucha el evento 'astro:page-load' que se dispara en cada navegación.
  //    Esto asegura que nuestro script se ejecute en la carga inicial Y al navegar a nuevas páginas.
  document.addEventListener('astro:page-load', setupAnimations);
</script>

<style>
  /* ESTADO INICIAL: El elemento está oculto y ligeramente desplazado */
  .scroll-animate {
    opacity: 0;
    transform: translateY(30px);
    transition-property: opacity, transform;
    transition-duration: 600ms; /* Duración de la animación */
    transition-timing-function: ease-out;
    /* Aplicamos un delay opcional por si lo pasamos como prop */
    transition-delay: var(--animation-delay, 0s);
  }

  /* ESTADO FINAL: El elemento es visible y está en su posición original */
  .scroll-animate.is-visible {
    opacity: 1;
    transform: translateY(0);
  }
</style>