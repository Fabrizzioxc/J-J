---
// componentes/ui/DialogAnimation.astro
interface Props {
  dialogId: string;
  title: string;
}

const { dialogId, title } = Astro.props;
---

<script>
  // --- SCRIPT SIMPLIFICADO ---
  // Se ha eliminado toda la l칩gica de 'expandir/contraer' (la funci칩n toggleDialogSize)

  const ViewTransitionClass = "vt-element-animation";
  const ViewTransitionClassClosing = "vt-element-animation-closing";

  async function toggleDialog(dialogID: string, event: Event) {
    if (!dialogID) {
      const openDialog = document.querySelector("dialog[open]") as HTMLDialogElement;
      if (!openDialog) return false;

      const originElement = document.querySelector("[origin-element]") as HTMLElement;

      openDialog.style.viewTransitionName = "vt-shared";
      openDialog.style.viewTransitionClass = ViewTransitionClassClosing;

      const viewTransition = document.startViewTransition(() => {
        if (originElement) {
            originElement.style.viewTransitionName = "vt-shared";
            originElement.style.viewTransitionClass = ViewTransitionClassClosing;
        }

        openDialog.style.viewTransitionName = "";
        openDialog.style.viewTransitionClass = "";
        openDialog.close();
      });

      await viewTransition.finished;

      if (originElement) {
        originElement.style.viewTransitionName = "";
        originElement.style.viewTransitionClass = "";
        originElement.removeAttribute("origin-element");
      }
      
      return false;
    }

    const dialog = document.getElementById(dialogID) as HTMLDialogElement;
    const originElement = event.currentTarget as HTMLElement;

    dialog.style.viewTransitionName = "vt-shared";
    dialog.style.viewTransitionClass = ViewTransitionClass;

    originElement.style.viewTransitionName = "vt-shared";
    originElement.style.viewTransitionClass = ViewTransitionClass;
    originElement.setAttribute("origin-element", "");

    const viewTransition = document.startViewTransition(() => {
      originElement.style.viewTransitionName = "";
      originElement.style.viewTransitionClass = "";
      dialog.showModal();
    });

    await viewTransition.finished;
    dialog.style.viewTransitionName = "";
    dialog.style.viewTransitionClass = "";
  }

  (window as any).toggleDialog = toggleDialog;
</script>

<dialog 
  id={dialogId} 
  class="fixed top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 border border-[var(--color-jj-dark)] w-full max-w-3xl h-full max-h-[700px] p-0 bg-[var(--color-jj-accent)] text-[var(--color-jj-text-dark)]"
>
  <div class="relative w-full h-full flex flex-col">
    
    <header class="flex-shrink-0 h-16 flex justify-end items-center p-4">
      <button class="close-button p-2 text-black hover:text-black transition-colors" onclick="toggleDialog('', event)" aria-label="Cerrar di치logo">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" /></svg>
      </button>
    </header>

    <h2 class="text-5xl font-bold text-center mt-4 mb-8">{title}</h2>

    <div class="flex-grow flex items-center justify-center p-16 overflow-y-auto text-xl">
      <slot />
    </div>
  </div>
</dialog>

<style is:global>
  /* Estilo para el fondo oscuro semi-transparente del di치logo */
  dialog::backdrop {
    background-color: rgba(0, 0, 0, 0.6);
    backdrop-filter: blur(4px);
  }

  /* --- CSS DE VIEW TRANSITIONS SIMPLIFICADO ---
    Se han eliminado todas las reglas de '.expanded' y 'vt-dialog-size'
  */
  ::view-transition-group(.vt-element-animation),
  ::view-transition-group(.vt-element-animation-closing) {
    animation-duration: 500ms;
    animation-timing-function: cubic-bezier(0.34, 0.49, 0, 1);
  }

  ::view-transition-old(.vt-element-animation),
  ::view-transition-new(.vt-element-animation),
  ::view-transition-old(.vt-element-animation-closing),
  ::view-transition-new(.vt-element-animation-closing) {
    height: 100%;
    min-height: 100%;
    overflow: clip;
    object-position: left top;
  }

  @keyframes vt-fade-in { from { opacity: 0; } }
  @keyframes vt-fade-out { to { opacity: 0; } }

  ::view-transition-old(.vt-element-animation) {
    animation: vt-fade-out 200ms both cubic-bezier(0.34, 0.49, 0, 1);
  }
  ::view-transition-new(.vt-element-animation) {
    animation: vt-fade-in 200ms both cubic-bezier(0.34, 0.49, 0, 1);
  }
  ::view-transition-old(.vt-element-animation-closing) {
    animation: vt-fade-out 200ms both cubic-bezier(0.34, 0.49, 0, 1);
  }
  ::view-transition-new(.vt-element-animation-closing) {
    animation: vt-fade-in 200ms both cubic-bezier(0.34, 0.49, 0, 1);
  }
</style>