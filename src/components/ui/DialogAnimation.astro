---
interface Props {
  dialogId: string; // Para identificar esta instancia del diálogo
  title: string;    // Para el título específico de cada modal
}

const { dialogId, title } = Astro.props;
---
<script>
  // Función para alternar el tamaño del diálogo (mantiene la funcionalidad de expansión)
  function toggleDialogSize(dialogID: string, event: Event) {
    const dialog = document.getElementById(dialogID) as HTMLDialogElement;
    const expandButton = event.currentTarget as HTMLElement;

    dialog.classList.toggle('expanded');

    if (dialog.classList.contains('expanded')) {
      expandButton.textContent = 'Contraer';
      expandButton.setAttribute('aria-label', 'Contraer diálogo');
    } else {
      expandButton.textContent = 'Expandir';
      expandButton.setAttribute('aria-label', 'Expandir diálogo');
    }
  }

  // Función para abrir y cerrar el diálogo de forma instantánea
  function toggleDialog(dialogID: string) { // Evento no es necesario aquí para el cierre
    if (!dialogID) { // Lógica para cerrar el diálogo
      const openDialog = document.querySelector("dialog[open]") as HTMLDialogElement;
      if (openDialog) {
        // Reiniciar estado del botón y diálogo al cerrar
        const expandButton = openDialog.querySelector('.expand-button') as HTMLElement;
        if (expandButton) {
          expandButton.textContent = 'Expandir';
          expandButton.setAttribute('aria-label', 'Expandir diálogo');
        }
        openDialog.classList.remove('expanded'); // Asegúrate de que no quede expandido al cerrar
        openDialog.close(); // Cierra el diálogo de forma instantánea
      }
      return false;
    }

    // Lógica para abrir el diálogo
    const dialog = document.getElementById(dialogID) as HTMLDialogElement;
    dialog.showModal(); // Abre el diálogo de forma instantánea
  }

  // Hacer las funciones globales para que sean accesibles desde el HTML de Astro
  (window as any).toggleDialog = toggleDialog;
  (window as any).toggleDialogSize = toggleDialogSize;
</script>

<dialog id={dialogId}
  class="fixed top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 rounded-3xl border border-gray-200 w-full max-w-3xl h-full max-h-[700px] p-0
         transition-all duration-500 ease-in-out /* Solo para la animación de expansión */"
>
  <div class="relative w-full h-full flex flex-col">
    <div class="flex justify-between items-center p-4 border-b border-gray-200">
      <h2 class="text-xl font-semibold">{title}</h2>
      <div class="flex space-x-2">
        <button class="close-button p-2 bg-gray-100 rounded-full text-lg hover:bg-gray-200" onclick="toggleDialog('')" aria-label="Cerrar diálogo">
          ❌
        </button>
        <button class="expand-button p-2 bg-gray-100 rounded-full text-sm font-medium hover:bg-gray-200" onclick={`toggleDialogSize('${dialogId}', event)`} aria-label="Expandir diálogo">
          Expandir
        </button>
      </div>
    </div>

    <div class="flex-grow flex items-center justify-center p-6">
      <slot />
    </div>
  </div>
</dialog>

<style>
  /*
   * Estilos para el backdrop del diálogo.
   * Por defecto, el <dialog> tiene un `::backdrop`.
   * Lo haremos instantáneo al abrir/cerrar.
   */
  dialog::backdrop {
    /* Fondo oscuro instantáneo. Ajusta la opacidad si prefieres un poco de transparencia. */
    background-color: rgba(0, 0, 0, 0.5);
  }

  /* Estilos específicos para el diálogo expandido */
  dialog.expanded {
    max-width: 100vw;
    max-height: 100vh;
    border-radius: 0rem;
    /* La transición de estas propiedades ya está definida en el `transition-all` del HTML del diálogo. */
  }
</style>